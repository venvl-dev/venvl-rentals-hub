
import { Toaster } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { LanguageProvider } from "@/contexts/LanguageContext";
import { AuthProvider } from "@/contexts/AuthContext";
import ProtectedRoute from "./components/auth/ProtectedRoute";
import { Suspense, lazy } from "react";

// Public pages (loaded immediately for fast initial load)
import Index from "./pages/Index";
import Auth from "./pages/Auth";
import PropertyListing from "./pages/PropertyListing";
import NotFound from "./pages/NotFound";

// Lazy-loaded guest pages
const GuestSignup = lazy(() => import("./pages/guest/GuestSignup"));
const GuestBookings = lazy(() => import("./pages/guest/GuestBookings"));

// Lazy-loaded host pages
const HostSignup = lazy(() => import("./pages/host/HostSignup"));
const HostDashboard = lazy(() => import("./pages/host/HostDashboard"));
const Calendar = lazy(() => import("./pages/Calendar"));

// Lazy-loaded admin pages
const SuperAdminLogin = lazy(() => import("./pages/admin/SuperAdminLogin"));
const AdminPanel = lazy(() => import("./pages/admin/AdminPanel"));
const SystemSetup = lazy(() => import("./pages/admin/SystemSetup"));
const CreateTestUsers = lazy(() => import("./pages/admin/CreateTestUsers"));
const DataSeeding = lazy(() => import("./pages/admin/DataSeeding"));

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
    },
  },
});

// Loading fallback component
const PageLoader = () => (
  <div className="min-h-screen flex items-center justify-center">
    <div className="text-center">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
      <div className="text-gray-600">Loading...</div>
    </div>
  </div>
);

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <LanguageProvider>
        <TooltipProvider>
          <Toaster />
          <AuthProvider>
            <BrowserRouter>
              <Suspense fallback={<PageLoader />}>
              <Routes>
              {/* Public routes */}
              <Route path="/" element={<Index />} />
              <Route path="/auth" element={<Auth />} />
              <Route path="/super-admin/login" element={<SuperAdminLogin />} />
              <Route path="/host/signup" element={<HostSignup />} />
              <Route path="/guest/signup" element={<GuestSignup />} />
              <Route path="/property/:id" element={<PropertyListing />} />
              
              {/* Protected routes */}
              <Route 
                path="/host/dashboard" 
                element={
                  <ProtectedRoute allowedRoles={['host']}>
                    <HostDashboard />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/guest/bookings" 
                element={
                  <ProtectedRoute allowedRoles={['guest']}>
                    <GuestBookings />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/calendar" 
                element={
                  <ProtectedRoute allowedRoles={['host', 'super_admin']}>
                    <Calendar />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/admin/panel" 
                element={
                  <ProtectedRoute allowedRoles={['super_admin']}>
                    <AdminPanel />
                  </ProtectedRoute>
                } 
              />
              
              {/* Development/Testing routes - require authentication but no specific role */}
              <Route 
                path="/system-setup" 
                element={
                  <ProtectedRoute allowedRoles={['super_admin']}>
                    <SystemSetup />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/create-test-users" 
                element={
                  <ProtectedRoute allowedRoles={['super_admin']}>
                    <CreateTestUsers />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/data-seeding" 
                element={
                  <ProtectedRoute>
                    <DataSeeding />
                  </ProtectedRoute>
                } 
              />
              
                <Route path="*" element={<NotFound />} />
              </Routes>
            </Suspense>
          </BrowserRouter>
        </AuthProvider>
        </TooltipProvider>
      </LanguageProvider>
    </QueryClientProvider>
  );
}

export default App;
